# .github/workflows/ai-code-review.yml (v4 - Fix script injection issue)

name: AI Code Review with Gemini

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Install jq tool
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Step 2: Checkout repository code
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 3: Get the code difference from the Pull Request
      - name: Get PR Diff
        id: get_diff
        run: |
          git diff --no-color "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}" > diff.txt
          
          if [ ! -s diff.txt ]; then
            echo "No code changes detected. Skipping AI review."
            echo "continue=false" >> $GITHUB_OUTPUT
          else
            echo "Code changes detected. Proceeding with AI review."
            echo "continue=true" >> $GITHUB_OUTPUT
          fi

      # Step 4: Call the Gemini API for the code review
      - name: Call Gemini API for Code Review
        id: call_gemini
        if: steps.get_diff.outputs.continue == 'true'
        run: |
          CODE_DIFF=$(cat diff.txt)
          JSON_PAYLOAD=$(jq -n --arg diff "$CODE_DIFF" '{
            "contents": [{
              "parts": [{
                "text": "You are a senior code reviewer specializing in identifying technical debt, refactoring suggestions, and applying clean code and SOLID principles.\n\nPlease review the following code diff from a pull request. Identify any potential technical debt, code smells, maintenance risks, or security issues. Provide specific, actionable refactoring suggestions in a bulleted list.\n\n---START CODE DIFF---\n\n\($diff)\n\n---END CODE DIFF---"
              }]
            }],
            "generationConfig": { "temperature": 0.4, "topK": 32, "topP": 1, "maxOutputTokens": 4096, "stopSequences": [] },
            "safetySettings": [
              { "category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" }, { "category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
              { "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" }, { "category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" }
            ]
          }')
          API_KEY="${{ secrets.GEMINI_API_KEY }}"
          RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${API_KEY}" -H "Content-Type: application/json" -d "${JSON_PAYLOAD}")
          if echo "${RESPONSE}" | jq -e '.error' > /dev/null; then echo "::error::Gemini API returned an error:" && echo "${RESPONSE}" && exit 1; fi
          if ! echo "${RESPONSE}" | jq -e '.candidates' > /dev/null; then echo "::error::Gemini API response is not in the expected format. 'candidates' field is missing." && echo "Full response: ${RESPONSE}" && exit 1; fi
          REVIEW_COMMENT=$(echo "${RESPONSE}" | jq -r '.candidates[0].content.parts[0].text')
          echo "review_comment<<EOF" >> $GITHUB_OUTPUT
          echo "${REVIEW_COMMENT}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 5: Post the review comment to the Pull Request (Corrected)
      - name: Post Review Comment to PR
        if: steps.get_diff.outputs.continue == 'true'
        uses: actions/github-script@v7
        # Pass the review comment as an environment variable
        env:
          REVIEW_COMMENT: ${{ steps.call_gemini.outputs.review_comment }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Read the variable from process.env inside the script
          script: |
            const reviewComment = process.env.REVIEW_COMMENT;
            const issue_number = context.issue.number;

            const comment = `
            ### ðŸ¤– Gemini AI Code Review

            Hello! I've reviewed the changes in this pull request. Here are my findings:

            ---

            ${reviewComment}

            ---

            *Note: This is an automated review by Gemini. Please use it as a guide and apply human oversight.*
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: comment
            });
